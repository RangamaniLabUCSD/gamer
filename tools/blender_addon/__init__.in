# ***************************************************************************
# This file is part of the GAMer software.
# Copyright (C) 2016-2018
# by Christopher Lee, Tom Bartol, John Moody, Rommie Amaro, J. Andrew McCammon,
#    and Michael Holst

# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# License as published by the Free Software Foundation; either
# version 2.1 of the License, or (at your option) any later version.

# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# Lesser General Public License for more details.

# You should have received a copy of the GNU Lesser General Public
# License along with this library; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
# ***************************************************************************
#

bl_info = {
    "name": "GAMer",
    "description": "GAMer: Geometry-preserving Adaptive Mesher",
    "author": "Chris Lee, John Moody, Zeyun Yu, Tom Bartol, Johan Hake, and Michael Holst",
    "version": (@PROJECT_VERSION_MAJOR@, @PROJECT_VERSION_MINOR@, @PROJECT_VERSION_PATCH@),
    "blender": (2, 7, 9),
    "api": 55057,
    "location": "View3D > Add > Mesh",
    "warning": "",
    "wiki_url": "https://github.com/ctlee/gamer/wiki",
    "tracker_url": "https://github.com/ctlee/gamer/issues",
    "category": "Mesh"}


if "bpy" in locals():
    print("Reloading GAMer")
    import importlib
    importlib.reload(gamer_gui)
    importlib.reload(markers)
    importlib.reload(tetrahedralization)
    importlib.reload(util)
else:
    print("Importing GAMer")
    from . import gamer_gui
    from . import markers
    from . import tetrahedralization
    from . import util

# General import
import bpy
import sys
import os

def add_handler ( handler_list, handler_function ):
    """ Only add a handler if it's not already in the list """
    if not (handler_function in handler_list):
        handler_list.append ( handler_function )


def remove_handler ( handler_list, handler_function ):
    """ Only remove a handler if it's in the list """
    if handler_function in handler_list:
        handler_list.remove ( handler_function )


def register():
    # print("Registering GAMer...")
    bpy.utils.register_module(__name__)
    T = bpy.types
    PP = bpy.props.PointerProperty
    T.Scene.gamer = PP(type=gamer_gui.GAMerPropertyGroup)
    T.Object.gamer = PP(type=markers.GAMerBoundaryMarkersList)
    T.Material.gamer = PP(type=markers.GAMerBoundaryMaterial)

    # Add the load_post handlers
    add_handler ( bpy.app.handlers.load_post, gamer_gui.gamer_load_post )
    add_handler ( bpy.app.handlers.load_post, markers.boundary_markers_load_post )
    # bpy.utils.register_class(util.GAMerDialogOperator)
    # print("GAMer registered")


def unregister():
    # bpy.utils.unregister_class(util.GAMerDialogOperator)
    remove_handler ( bpy.app.handlers.load_post, markers.boundary_markers_load_post )
    remove_handler ( bpy.app.handlers.load_post, gamer_gui.gamer_load_post )
    bpy.utils.unregister_module(__name__)
    # print("GAMer unregistered")


# for testing
if __name__ == '__main__':
    register()
